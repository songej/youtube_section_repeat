name: Release

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to (re)release, e.g. v1.2.7'
        required: true

permissions:
  contents: write
  pull-requests: write

jobs:
  release-and-merge:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      REF: ${{ github.event_name == 'workflow_dispatch' && inputs.tag || github.ref_name }}

    steps:
      - name: 'Checkout ${{ env.REF }} (full history)'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ env.REF }}

      - name: 'Build code-only archive'
        shell: bash
        run: |
          set -e
          test -d code || { echo "::error:: 'code/' 폴더가 없습니다."; exit 1; }
          mkdir -p dist
          (cd code && zip -r ../dist/youtube_section_repeat-code-${REF}.zip . \
             -x ".git/*" "*.DS_Store")
          ls -lh dist

      - name: 'Create/Update GitHub Release'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.REF }}
          name:     ${{ env.REF }}
          generate_release_notes: true
          prerelease: ${{ contains(env.REF, '-') }}
          files: |
            dist/youtube_section_repeat-code-${{ env.REF }}.zip

      - name: 'Check relationship & diff'
        id: state
        shell: bash
        run: |
          set -e
          git fetch origin dev main
          BASE=$(git merge-base origin/main origin/dev || true)
          echo "related=$([ -z "$BASE" ] && echo false || echo true)" >> "$GITHUB_OUTPUT"
          AHEAD=$(git rev-list --left-right --count origin/main...origin/dev | awk '{print $2}')
          echo "ahead=$AHEAD" >> "$GITHUB_OUTPUT"
          echo "related=$([ -z "$BASE" ] && echo false || echo true), dev ahead by $AHEAD"

      - name: 'One-time stitch: set main = dev (force-with-lease)'
        if: steps.state.outputs.related == 'false' && steps.state.outputs.ahead != '0'
        shell: bash
        run: |
          set -e
          echo "No common history. Forcing main to dev (one-time)."
          git push origin origin/dev:refs/heads/main --force-with-lease

      - name: 'Create or reuse PR dev -> main'
        if: steps.state.outputs.related == 'true' && steps.state.outputs.ahead != '0'
        id: pr
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=$(gh pr list -H dev -B main --state open --json number -q '.[0].number')
          if [ -z "$PR_NUMBER" ]; then
            gh pr create -H dev -B main \
              -t "Release ${{ env.REF }}" \
              -b "Auto PR created on tag ${{ env.REF }}"
            PR_NUMBER=$(gh pr list -H dev -B main --state open --json number -q '.[0].number')
          fi
          echo "PR_NUMBER=$PR_NUMBER" >> "$GITHUB_OUTPUT"
          echo "PR: https://github.com/${{ github.repository }}/pull/$PR_NUMBER"

      - name: 'Enable auto-merge (try allowed types)'
        if: steps.pr.outputs.PR_NUMBER != ''
        continue-on-error: true
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set +e
          gh pr merge "${{ steps.pr.outputs.PR_NUMBER }}" --merge  --auto && exit 0
          gh pr merge "${{ steps.pr.outputs.PR_NUMBER }}" --squash --auto && exit 0
          gh pr merge "${{ steps.pr.outputs.PR_NUMBER }}" --rebase --auto && exit 0
          echo "::warning::Auto-merge not scheduled (checks/reviews pending or disallowed)."
